import matplotlib.pyplot as plt
import numpy as np


def overhead(save):
    raw_inf = [101.0000, 101.8600, 103.0500, 103.9800, 104.8900, 105.7700, 106.9000, 107.3600, 107.9100, 109.8600,
               110.3600, 111.5500, 111.3800, 113.1100, 113.9100, 115.0100, 116.0000, 115.7400, 117.8100, 118.0900,
               119.8000, 120.7700, 121.9200, 122.6300, 124.2300, 125.9800, 127.4400, 126.8200, 127.5900, 129.7300,
               131.3600, 134.1000, 135.0700, 134.1400, 137.9800, 137.4000, 140.3900, 140.2400, 142.4800, 143.1100,
               146.8600, 145.7100, 150.3600, 150.2500, 152.4900, 154.1300, 153.3200, 159.9000, 162.0800, 160.2200,
               164.2300, 165.1200, 166.1800, 169.8800, 170.5900, 172.5700, 174.4800, 178.4300, 179.4500, 183.3100,
               180.6100, 185.1900, 187.5200, 190.1900, 193.7400, 193.8000, 197.6800, 196.2900, 198.6400, 202.8200,
               202.8500, 202.9200, 207.5000, 209.6700, 208.6500, 210.2300, 213.7900, 214.8900, 215.3600, 220.0600,
               218.4900, 220.6800, 222.5500, 225.3500, 226.1300, 230.4500, 228.5000, 231.7600, 234.9500, 233.8900,
               233.1200, 234.5900, 236.0800, 237.2300, 238.9700, 238.3400, 241.6400, 242.0000, 243.1200, 244.3000,
               246.3400, 243.5300, 248.6300, 249.4100, 247.5200, 249.9000, 252.5600, 251.5100, 254.7200, 255.8800,
               251.6200, 258.3600, 258.8200, 259.4900, 255.2500, 260.3000, 259.4400, 261.4900, 259.1500, 263.5500,
               261.4900, 264.2000, 263.0200, 265.5400, 265.3600, 262.6600, 265.0600, 263.9900, 267.8900, 268.5800,
               264.1700, 268.9900, 266.8500, 270.3700, 269.2600, 268.7400, 271.4900, 270.6800, 270.5000, 269.8500,
               270.5400, 269.7000, 271.6400, 272.5100, 271.3900, 269.5200, 272.0500, 269.0300, 270.3100, 272.8300,
               270.8700, 273.1700, 270.8600, 272.9000, 267.6500, 269.0300, 272.7500, 269.3500, 266.8800, 268.7100,
               267.6900, 266.9400, 268.7800, 264.4900, 258.6700, 267.9400, 261.9900, 263.4400, 258.9600, 261.1500,
               264.6700, 256.1000, 250.5600, 255.3600, 256.4200, 247.2900, 246.2900, 242.6800, 240.8200, 239.6200,
               231.4300, 228.8300, 219.7200, 227.7300, 216.5500, 215.9800, 213.8100, 211.1900, 199.8200, 194.0600,
               190.9600, 190.8700, 188.0000, 178.5200, 179.7100, 174.4200, 167.8600, 166.0100, 164.2800, 157.3900,
               158.1900, 153.4600, 150.6300, 145.5300, 143.0600, 144.5100, 138.2000, 137.6600, 135.6300, 130.5000,
               128.3700, 125.5500, 125.8500, 120.0900, 120.6200, 116.7300, 113.8200, 112.8700, 111.0800, 108.3100,
               107.2000, 104.7900, 103.5200, 100.7600, 99.1200, 97.4300, 94.9400, 93.7800, 91.6500, 88.8200, 88.0800,
               87.1700, 85.6300, 84.3400, 81.7500, 80.0900, 78.4900, 76.3800, 75.3200, 73.6600, 72.4700, 70.8600,
               69.8100, 68.0500, 66.5600, 65.3300, 63.4100, 62.7000, 61.5500, 59.6400, 58.5400, 56.7200, 56.2200,
               54.7700, 53.2900, 51.9400, 50.6100, 49.4100, 48.2700, 47.1800, 45.9100, 44.6800, 43.2400, 42.4200,
               41.2100, 39.7600, 38.8600, 37.4700, 36.3400, 35.3800, 34.3100, 33.1800, 31.9300, 30.9500, 29.9200,
               28.6500, 27.5300, 26.5100, 25.4200, 24.4600, 23.3600, 22.4500, 21.3500, 20.2100, 19.2300, 18.1400,
               17.1700, 16.1400, 15.0800, 14.0400, 13.0300, 12.0400, 11.0100, 10.0200, 9.0000, 8.0000, 7.0000, 6.0000,
               5.0000, 4.0000, 3.0000, 2.0000, 1.0000, 0.0000]
    parity_inf = [raw / 101 for raw in raw_inf]
    y_inf = np.array(parity_inf)

    raw_10 = [101.0000, 119.6180, 143.8900, 187.1860, 229.9180, 252.1760, 246.6680, 122.7520, 64.6820, 30.3160, 0.0000]
    parity_10 = [raw / 101 for raw in raw_10]
    y_10 = np.array(parity_10)

    raw_20 = [101.0000, 110.1080, 119.5280, 130.7960, 146.8500, 165.4800, 196.8920, 218.6420, 240.7340, 253.7420,
              259.7820, 263.4640, 251.6500, 182.6140, 118.1520, 87.7700, 64.9600, 46.1760, 30.3080, 15.1540, 0.0000]
    parity_20 = [raw / 101 for raw in raw_20]
    y_20 = np.array(parity_20)

    raw_50 = [101.0000, 104.6140, 108.3840, 112.2540, 116.1380, 120.6380, 125.2960, 130.6340, 135.9500, 143.0300,
              149.8680, 157.7780, 170.3300, 182.1760, 192.8660, 207.9240, 217.2000, 226.8620, 234.7640, 241.7020,
              247.2940, 250.5500, 256.0560, 258.9340, 261.0480, 262.2400, 266.0200, 266.5740, 264.3560, 261.1880,
              251.2040, 224.3840, 185.1660, 156.4340, 135.8500, 120.3300, 106.8240, 96.0040, 85.3500, 75.5740, 67.0920,
              58.8600, 51.7420, 44.3740, 37.5240, 30.7760, 24.4780, 18.2180, 12.1160, 6.0580, 0.0000]
    parity_50 = [raw / 101 for raw in raw_50]
    y_50 = np.array(parity_50)

    raw_100 = [101.0000, 102.8000, 104.6280, 106.5880, 108.3420, 110.3840, 112.3320, 114.4040, 116.4320, 119.0100,
               121.0420, 123.2580, 125.6220, 129.0040, 131.4780, 134.5280, 136.6300, 140.7720, 144.8820, 148.8020,
               154.3640, 158.5400, 164.0740, 170.4500, 174.0700, 180.1180, 186.1620, 193.0600, 197.3320, 202.0540,
               207.7260, 211.5800, 218.7740, 221.6540, 227.5500, 230.5000, 234.0100, 237.9920, 241.1840, 245.5660,
               247.0360, 249.9140, 251.8280, 253.6360, 255.4080, 256.7220, 257.6900, 260.6080, 261.0560, 262.1880,
               263.3660, 263.9620, 264.0440, 266.1080, 265.3580, 263.9300, 262.1420, 259.9320, 256.3180, 253.6220,
               243.2040, 229.6880, 214.1120, 197.4180, 182.0080, 166.5460, 156.4100, 146.2620, 137.8780, 129.4100,
               123.0680, 115.3200, 109.5860, 103.4420, 97.5100, 92.1100, 87.0280, 81.7480, 77.1160, 72.6140, 68.1680,
               64.0420, 60.0260, 55.8440, 52.2220, 48.2560, 44.7440, 41.1980, 37.7640, 34.3760, 30.9800, 27.8040,
               24.6220,
               21.4240, 18.3300, 15.2000, 12.1300, 9.1120, 6.0460, 3.0240, 0.0000]
    parity_100 = [raw / 101 for raw in raw_100]
    y_100 = np.array(parity_100)

    x_inf = [i / (len(y_inf) - 1) * 100 for i in range(len(y_inf))]
    x_10 = [i / (len(y_10) - 1) * 100 for i in range(len(y_10))]
    x_20 = [i / (len(y_20) - 1) * 100 for i in range(len(y_20))]
    x_50 = [i / (len(y_50) - 1) * 100 for i in range(len(y_50))]
    x_100 = [i / (len(y_100) - 1) * 100 for i in range(len(y_100))]

    plt.plot(x_10, y_10, label="Node=10")
    plt.plot(x_20, y_20, label="Node=20")
    plt.plot(x_50, y_50, label="Node=50")
    # plt.plot(x_100, y_100, label="Node=100")
    plt.plot(x_inf, y_inf, label="Node=No. of Blocks")

    plt.xlim([0, 100])
    plt.ylim([0, 3])
    plt.xlabel('Percentage of Node Loss')
    plt.ylabel('Average Download Parity Blocks Ratio')
    plt.title("Data All Missing and Part of Parity Missing")
    plt.legend(loc='upper right')
    if save is False:
        plt.show()
    else:
        plt.savefig('results/different_nb_nodes_overhead.png', bbox_inches='tight')
        plt.clf()


def best_effort(save):
    y_inf = np.array(
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9999, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9999,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9900, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 0.9897, 0.9900, 0.9999, 0.9998, 0.9900, 0.9997, 1.0000, 0.9997, 0.9999, 0.9998, 0.9898, 1.0000,
         0.9997, 0.9999, 0.9898, 0.9997, 0.9799, 0.9899, 0.9798, 0.9897, 0.9894, 0.9997, 0.9998, 1.0000, 0.9998, 0.9796,
         0.9894, 0.9898, 0.9900, 0.9899, 0.9588, 0.9989, 0.9684, 0.9784, 0.9887, 0.9685, 0.9887, 0.9888, 0.9775, 0.9684,
         0.9673, 0.9556, 0.9740, 0.9766, 0.9554, 0.9373, 0.9550, 0.9246, 0.9451, 0.9539, 0.9323, 0.9446, 0.9237, 0.9230,
         0.8821, 0.8819, 0.9294, 0.8848, 0.8544, 0.8907, 0.8537, 0.8560, 0.8613, 0.8208, 0.7748, 0.8843, 0.7563, 0.8108,
         0.7401, 0.7995, 0.8289, 0.7634, 0.6887, 0.7375, 0.7648, 0.6922, 0.6605, 0.6305, 0.6380, 0.6273, 0.5539, 0.5536,
         0.5641, 0.5438, 0.4906, 0.5430, 0.5111, 0.5226, 0.4372, 0.3892, 0.3572, 0.3562, 0.3977, 0.2898, 0.3410, 0.3508,
         0.2874, 0.2588, 0.2882, 0.2564, 0.2783, 0.2409, 0.2557, 0.1945, 0.2237, 0.2251, 0.1877, 0.1913, 0.1716, 0.1658,
         0.1537, 0.1320, 0.1661, 0.1074, 0.1461, 0.0830, 0.0850, 0.1224, 0.1087, 0.0766, 0.0924, 0.0971, 0.0877, 0.0773,
         0.0801, 0.0757, 0.0829, 0.0569, 0.0524, 0.0508, 0.0553, 0.0436, 0.0485, 0.0422, 0.0296, 0.0251, 0.0330, 0.0293,
         0.0319, 0.0195, 0.0375, 0.0242, 0.0207, 0.0190, 0.0188, 0.0169, 0.0171, 0.0094, 0.0207, 0.0121, 0.0107, 0.0043,
         0.0104, 0.0188, 0.0147, 0.0086, 0.0077, 0.0127, 0.0076, 0.0084, 0.0127, 0.0051, 0.0053, 0.0049, 0.0065, 0.0044,
         0.0054, 0.0038, 0.0016, 0.0043, 0.0029, 0.0012, 0.0022, 0.0016, 0.0017, 0.0012, 0.0021, 0.0011, 0.0016, 0.0000,
         0.0004, 0.0008, 0.0000, 0.0005, 0.0000, 0.0003, 0.0002, 0.0001, 0.0000, 0.0004, 0.0000, 0.0001, 0.0000, 0.0002,
         0.0003, 0.0002, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000])
    y_10 = np.array([1.0000, 1.0000, 1.0000, 0.9999, 0.9997, 0.9971, 0.8834, 0.2716, 0.0564, 0.0031, 0.0000])
    y_20 = np.array(
        [1.0000, 1.0000, 1.0000, 1.0000, 0.9999, 1.0000, 0.9997, 0.9997, 0.9975, 0.9933, 0.9843, 0.9430, 0.8210, 0.5219,
         0.2416, 0.1209, 0.0586, 0.0242, 0.0079, 0.0015, 0.0000])
    y_50 = np.array(
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9999, 1.0000, 0.9999, 0.9999, 0.9999, 0.9998,
         0.9999, 0.9997, 0.9997, 0.9996, 0.9994, 0.9935, 0.9974, 0.9991, 0.9928, 0.9922, 0.9880, 0.9772, 0.9691, 0.9611,
         0.9105, 0.8817, 0.8187, 0.6871, 0.5142, 0.4055, 0.2984, 0.2342, 0.1950, 0.1534, 0.1164, 0.0908, 0.0637, 0.0428,
         0.0368, 0.0228, 0.0181, 0.0094, 0.0072, 0.0028, 0.0015, 0.0006, 0.0000])
    y_100 = np.array(
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9999, 0.9999, 0.9999, 0.9999, 0.9998, 0.9999, 0.9998, 0.9999, 0.9996,
         0.9998, 0.9998, 0.9976, 0.9957, 0.9996, 0.9977, 0.9996, 0.9996, 0.9972, 0.9993, 0.9955, 0.9973, 0.9990, 0.9987,
         0.9947, 0.9944, 0.9903, 0.9882, 0.9852, 0.9926, 0.9847, 0.9797, 0.9816, 0.9578, 0.9584, 0.9650, 0.9421, 0.9160,
         0.8884, 0.8771, 0.8176, 0.8335, 0.7647, 0.6990, 0.6099, 0.5560, 0.4996, 0.4340, 0.3876, 0.3555, 0.3092, 0.2763,
         0.2528, 0.2214, 0.1961, 0.1838, 0.1599, 0.1397, 0.1161, 0.1088, 0.0894, 0.0803, 0.0732, 0.0628, 0.0525, 0.0381,
         0.0373, 0.0323, 0.0257, 0.0207, 0.0174, 0.0148, 0.0110, 0.0091, 0.0074, 0.0047, 0.0032, 0.0020, 0.0014, 0.0012,
         0.0005, 0.0002, 0.0000])

    x_inf = [i / (len(y_inf) - 1) * 100 for i in range(len(y_inf))]
    x_10 = [i / (len(y_10) - 1) * 100 for i in range(len(y_10))]
    x_20 = [i / (len(y_20) - 1) * 100 for i in range(len(y_20))]
    x_50 = [i / (len(y_50) - 1) * 100 for i in range(len(y_50))]
    x_100 = [i / (len(y_100) - 1) * 100 for i in range(len(y_100))]

    plt.plot(x_10, y_10, label="Node=10")
    plt.plot(x_20, y_20, label="Node=20")
    plt.plot(x_50, y_50, label="Node=50")
    # plt.plot(x_100, y_100, label="Node=100")
    plt.plot(x_inf, y_inf, label="Node=No. of Blocks")

    plt.xlim([0, 100])
    plt.xlabel('Percentage of Node Loss')
    plt.ylabel('Best Effort Recovery Rate')
    plt.title("Data All Missing and Part of Parity Missing")
    plt.legend(loc='upper right')
    if save is False:
        plt.show()
    else:
        plt.savefig('results/different_nb_nodes_best_effort.png', bbox_inches='tight')
        plt.clf()


def recovery_likelihood(save):
    y_inf = np.array(
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9900, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9900,
         1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9900, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
         1.0000, 1.0000, 0.9600, 0.9900, 0.9900, 0.9900, 0.9900, 0.9700, 1.0000, 0.9700, 0.9900, 0.9800, 0.9700, 1.0000,
         0.9700, 0.9900, 0.9700, 0.9700, 0.9700, 0.9800, 0.9600, 0.9600, 0.9600, 0.9700, 0.9800, 1.0000, 0.9800, 0.9400,
         0.9300, 0.9700, 0.9900, 0.9800, 0.8700, 0.9000, 0.8500, 0.9300, 0.8800, 0.9000, 0.9300, 0.8900, 0.9000, 0.8600,
         0.8400, 0.8300, 0.7800, 0.7900, 0.7700, 0.8100, 0.8100, 0.7400, 0.7400, 0.7800, 0.7100, 0.7100, 0.6800, 0.6700,
         0.6200, 0.6200, 0.6300, 0.5300, 0.5100, 0.5500, 0.5900, 0.4800, 0.4000, 0.4400, 0.3100, 0.4800, 0.3200, 0.2800,
         0.3000, 0.2300, 0.2800, 0.2100, 0.1600, 0.1200, 0.1500, 0.1800, 0.0500, 0.1000, 0.1000, 0.0200, 0.0400, 0.0500,
         0.0100, 0.0100, 0.0100, 0.0200, 0.0200, 0.0100, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000])
    y_10 = np.array([1.0000, 1.0000, 1.0000, 0.9940, 0.9700, 0.9100, 0.3840, 0.0000, 0.0000, 0.0000, 0.0000])
    y_20 = np.array(
        [1.0000, 1.0000, 1.0000, 1.0000, 0.9940, 0.9980, 0.9660, 0.9660, 0.9440, 0.9280, 0.8400, 0.6340, 0.2880, 0.0100,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000])
    y_50 = np.array(
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9980, 1.0000, 0.9920, 0.9960, 0.9920, 0.9940, 0.9880, 0.9800,
         0.9880, 0.9720, 0.9720, 0.9640, 0.9420, 0.9460, 0.9380, 0.9140, 0.8740, 0.8420, 0.8140, 0.7840, 0.6720, 0.5900,
         0.4160, 0.2920, 0.1620, 0.0380, 0.0080, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000])
    y_100 = np.array(
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9960, 1.0000, 1.0000, 0.9980, 1.0000,
         0.9980, 0.9960, 1.0000, 0.9980, 0.9960, 0.9940, 0.9920, 0.9900, 0.9860, 0.9820, 0.9940, 0.9840, 0.9860, 0.9640,
         0.9800, 0.9840, 0.9620, 0.9660, 0.9620, 0.9720, 0.9560, 0.9560, 0.9280, 0.9320, 0.9460, 0.9280, 0.9060, 0.8820,
         0.8700, 0.8740, 0.8480, 0.8400, 0.7860, 0.7760, 0.7580, 0.7320, 0.6960, 0.6160, 0.5820, 0.5180, 0.4680, 0.3940,
         0.2880, 0.2080, 0.1580, 0.0960, 0.0560, 0.0160, 0.0120, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000])

    x_inf = [i / (len(y_inf) - 1) * 100 for i in range(len(y_inf))]
    x_10 = [i / (len(y_10) - 1) * 100 for i in range(len(y_10))]
    x_20 = [i / (len(y_20) - 1) * 100 for i in range(len(y_20))]
    x_50 = [i / (len(y_50) - 1) * 100 for i in range(len(y_50))]
    x_100 = [i / (len(y_100) - 1) * 100 for i in range(len(y_100))]

    plt.plot(x_10, y_10, label="Node=10")
    plt.plot(x_20, y_20, label="Node=20")
    plt.plot(x_50, y_50, label="Node=50")
    # plt.plot(x_100, y_100, label="Node=100")
    plt.plot(x_inf, y_inf, label="Node=No. of Blocks")

    plt.xlim([0, 100])
    plt.xlabel('Percentage of Node Loss')
    plt.ylabel('Full File Recovery Likelihood')
    plt.title("Data All Missing and Part of Parity Missing")
    plt.legend(loc='upper right')
    if save is False:
        plt.show()
    else:
        plt.savefig('results/different_nb_nodes_recovery_likelihood.png', bbox_inches='tight')
        plt.clf()
