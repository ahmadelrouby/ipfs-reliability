package test

import (
	"encoding/json"
	"fmt"
	ipfsconnector "ipfs-alpha-entanglement-code/ipfs-connector"
	"ipfs-alpha-entanglement-code/performance"
	"math/rand"
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

func max(a float32, b float32) float32 {
	if a > b {
		return a
	} else {
		return b
	}
}

func Test_Only_Data_Loss(t *testing.T) {
	var allRates []string
	var allOverhead []string
	var accuRate float32
	var accuOverhead float32

	onlyData := func(missNum int, fileinfo performance.FileInfo, try int) func(*testing.T) {
		return func(*testing.T) {
			conn, err := ipfsconnector.CreateIPFSConnector(0)
			require.NoError(t, err)

			// download metafile
			data, err := conn.GetFileToMem(fileinfo.MetaCID)
			require.NoError(t, err)
			var metaData performance.Metadata
			err = json.Unmarshal(data, &metaData)
			require.NoError(t, err)

			// create getter
			getter, err := performance.CreateRecoverGetter(conn, metaData.DataCIDIndexMap, metaData.ParityCIDs)
			require.NoError(t, err)

			for i := 0; i < try; i++ {
				indexes := make([]int, fileinfo.TotalBlock)
				for i := 0; i < fileinfo.TotalBlock; i++ {
					indexes[i] = i
				}
				missedIndexes := map[int]struct{}{}
				for i := 0; i < missNum; i++ {
					r := int(rand.Int63n(int64(len(indexes))))
					missedIndexes[indexes[r]] = struct{}{}
					indexes[r], indexes[len(indexes)-1] = indexes[len(indexes)-1], indexes[r]
					indexes = indexes[:len(indexes)-1]
				}
				getter.DataFilter = missedIndexes

				result := performance.Recovery(fileinfo, metaData, getter)
				t.Logf("Data Recovery Rate: %f", result.RecoverRate)
				t.Logf("Parity Overhead: %f", result.DownloadParity)
				t.Logf("Successfully Downloaded Block: %d", result.PartialSuccessCnt)
				accuRate += result.RecoverRate
				accuOverhead += result.DownloadParity
			}

		}
	}

	key := "25MB"
	try := 100
	rand.Seed(time.Now().UnixNano())
	for i := 0; i <= performance.InfoMap[key].TotalBlock; i++ {
		accuRate = 0
		accuOverhead = 0
		t.Run(fmt.Sprintf("test_%d", i), onlyData(i, performance.InfoMap[key], try))

		allRates = append(allRates, fmt.Sprintf("%.4f", accuRate/float32(try)))
		allOverhead = append(allOverhead, fmt.Sprintf("%.4f", float32(accuOverhead)/(float32(try))))
	}

	// missNum: 1
	// Success Data Recovery Rate: 1.000000
	// Success Parity Overhead: 2
	// missNum: 81 (All blocks are missing)
	// Success Data Recovery Rate: 1.000000
	// Success Parity Overhead: 81

	// Success Rate: [1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000]
	// Overhead: [0.0000,1.9500,1.9350,1.8600,1.9125,1.9220,1.8950,1.8400,1.8563,1.8467,1.8300,1.8436,1.8217,1.8338,1.8207,1.8127,1.7938,1.7947,1.7739,1.7574,1.7690,1.7543,1.7423,1.7317,1.7229,1.7204,1.6912,1.6911,1.6754,1.6634,1.6703,1.6426,1.6375,1.6415,1.6171,1.6209,1.5950,1.5900,1.5934,1.5744,1.5842,1.5563,1.5450,1.5451,1.5227,1.5153,1.5215,1.5064,1.4942,1.4806,1.4778,1.4647,1.4490,1.4502,1.4372,1.4344,1.4266,1.4139,1.3953,1.3937,1.3830,1.3638,1.3684,1.3513,1.3403,1.3312,1.3271,1.3148,1.3051,1.3001,1.2849,1.2780,1.2683,1.2632,1.2508,1.2397,1.2311,1.2218,1.2163,1.2075,1.1955,1.1870,1.1763,1.1699,1.1600,1.1454,1.1409,1.1326,1.1230,1.1106,1.1029,1.0934,1.0835,1.0729,1.0657,1.0546,1.0469,1.0377,1.0279,1.0185,1.0094,1.0000]
	fmt.Println("Success Rate: [" + strings.Join(allRates, ",") + "]")
	fmt.Println("Overhead: [" + strings.Join(allOverhead, ",") + "]")
}

func Test_Only_Parity_Loss(t *testing.T) {
	var partialRates []string
	var fullRates []string
	var allOverhead []string
	// var accuPartialRate float32
	// var accuFullRate float32
	// var accuOverhead uint

	onlyParity := func(missNum int, fileinfo performance.FileInfo, iteration int) func(*testing.T) {
		return func(*testing.T) {
			result := performance.RecoverWithFilter(fileinfo, missNum, iteration)
			partialRates = append(partialRates, fmt.Sprintf("%.4f", result.RecoverRate))
			fullRates = append(fullRates, fmt.Sprintf("%.4f", result.FullSuccessCnt))
			allOverhead = append(allOverhead, fmt.Sprintf("%.4f", result.DownloadParity))
		}
	}

	// onlyParity := func(missNum int, fileinfo performance.FileInfo) func(*testing.T) {
	// 	return func(*testing.T) {
	// 		indexes := make([][]int, 3)
	// 		for i := range indexes {
	// 			indexes[i] = make([]int, fileinfo.TotalBlock)
	// 		}
	// 		for i := range indexes {
	// 			for j := 0; j < fileinfo.TotalBlock; j++ {
	// 				indexes[i][j] = j + 1
	// 			}
	// 		}

	// 		/* All data block is missing */
	// 		missedDataIndexes := map[int]struct{}{}
	// 		for i := 0; i < fileinfo.TotalBlock; i++ {
	// 			missedDataIndexes[i] = struct{}{}
	// 		}

	// 		/* Some parity block is missing */
	// 		missedParityIndexes := []map[int]struct{}{{}, {}, {}}
	// 		for i := 0; i < missNum; i++ {
	// 			rOuter := int(rand.Int63n(int64(3)))
	// 			for len(indexes[rOuter]) == 0 {
	// 				rOuter = int(rand.Int63n(int64(3)))
	// 			}
	// 			rInner := int(rand.Int63n(int64(len(indexes[rOuter]))))
	// 			missedParityIndexes[rOuter][indexes[rOuter][rInner]] = struct{}{}
	// 			indexes[rOuter][rInner], indexes[rOuter][len(indexes[rOuter])-1] =
	// 				indexes[rOuter][len(indexes[rOuter])-1], indexes[rOuter][rInner]
	// 			indexes[rOuter] = indexes[rOuter][:len(indexes[rOuter])-1]
	// 		}
	// 		result := performance.Recovery(fileinfo, missedDataIndexes, missedParityIndexes)
	// 		t.Logf("Data Recovery Rate: %f", result.RecoverRate)
	// 		t.Logf("Parity Overhead: %d", result.DownloadParity)
	// 		t.Logf("Successfully Downloaded Block: %d", result.PartialSuccessCnt)
	// 		accuPartialRate += result.RecoverRate
	// 		// Only count overhead with success blocks
	// 		accuOverhead += result.DownloadParity
	// 		if result.PartialSuccessCnt == fileinfo.TotalBlock {
	// 			accuFullRate++
	// 		}
	// 	}
	// }

	key := "25MB"
	try := 100
	rand.Seed(time.Now().UnixNano())
	for i := 0; i <= performance.InfoMap[key].TotalBlock*3; i++ {
		// accuPartialRate = 0
		// accuFullRate = 0
		// accuOverhead = 0
		for j := 0; j < try; j++ {
			t.Run(fmt.Sprintf("test_%d_%d", i, j), onlyParity(i, performance.InfoMap[key], try))
			// t.Run(fmt.Sprintf("test_%d_%d", i, j), onlyParity(i, performance.InfoMap[key]))
		}
		// partialRates = append(partialRates, fmt.Sprintf("%.4f", accuPartialRate/float32(try)))
		// fullRates = append(fullRates, fmt.Sprintf("%.4f", accuFullRate/float32(try)))
		// allOverhead = append(allOverhead, fmt.Sprintf("%.4f", float32(accuOverhead)/float32(try)))
		time.Sleep(time.Second * 5)
		fmt.Println("Success Partial Recovery Rate: [" + strings.Join(partialRates, ",") + "]")
		fmt.Println("Success Full Recovery Rate: [" + strings.Join(fullRates, ",") + "]")
		fmt.Println("Overhead: [" + strings.Join(allOverhead, ",") + "]")
	}

	// Success Rate
	// Success Partial Recovery Rate
	// Success Full Recovery Rate
	// Overhead: [1.0000,1.0086,1.0171,1.0263,1.0363,1.0447,1.0493,1.0679,1.0713,1.0809,1.0910,1.0983,1.1087,1.1137,1.1311,1.1291,1.1402,1.1554,1.1584,1.1810,1.1915,1.1970,1.2071,1.2109,1.2258,1.2299,1.2534,1.2575,1.2786,1.2722,1.2837,1.3057,1.3271,1.3373,1.3333,1.3632,1.3812,1.3883,1.4069,1.4254,1.4374,1.4752,1.4620,1.4946,1.4990,1.5045,1.5318,1.5712,1.5689,1.5956,1.6319,1.6391,1.6674,1.7047,1.6904,1.7580,1.7207,1.7507,1.7984,1.8296,1.8408,1.8672,1.8818,1.9021,1.9171,1.9629,1.9644,1.9999,2.0398,2.0333,2.1081,2.0752,2.0854,2.1492,2.1529,2.1922,2.2361,2.2204,2.2628,2.2432,2.2909,2.3019,2.3556,2.3576,2.3735,2.3941,2.3942,2.4010,2.4211,2.4713,2.4831,2.4605,2.4670,2.5093,2.5169,2.5383,2.5541,2.5616,2.6293,2.5740,2.6117,2.6143,2.5849,2.6338,2.7013,2.6689,2.6278,2.6668,2.7217,2.6625,2.6291,2.6297,2.6673,2.7202,2.6784,2.6856,2.6909,2.7342,2.6564,2.8008,2.8119,2.7489,2.7315,2.7016,2.7909,2.7475,2.7962,2.8434,2.7948,2.8213,2.7725,2.7907,2.8295,2.7859,2.8895,2.8132,2.8265,2.8252,2.7858,2.8891,2.9008,2.8581,2.8711,2.8353,2.8430,2.8345,2.7765,2.8127,2.9204,2.9130,2.9863,2.9913,2.9395,2.9338,2.9573,2.9789,2.9104,2.9055,2.9773,3.0807,3.1150,3.0742,3.0894,3.1650,3.0671,3.1297,3.1031,3.1282,3.2246,3.0986,3.3592,3.2737,3.3433,3.2792,3.2382,3.5532,3.3363,3.3786,3.5026,3.5411,3.6686,3.7065,3.7707,3.5012,3.7083,3.9822,3.7070,3.8519,4.2504,3.7675,4.1263,4.2135,3.8605,4.3939,4.1942,4.1598,4.3591,4.5704,5.4030,4.9204,4.5962,4.6295,4.9967,5.2912,5.6659,5.5916,5.4151,5.7937,5.4896,6.1375,6.2644,6.0920,7.1343,6.1305,7.0165,8.4467,7.8985,8.1701,8.7223,8.4627,7.9567,9.4842,8.6447,10.9105,9.2225,10.3349,8.9357,12.3407,10.6059,11.9381,12.2716,15.6667,10.4844,17.9976,16.0371,15.8884,13.7017,14.5154,13.2871,15.9741,19.8799,18.1616,12.3428,13.0491,22.5000,23.9643,21.6582,29.7744,18.4089,27.9600,30.4722,34.9216,200.5769,30.3294,40.1520,42.2328,49.9896,60.3205,34.7519,30.7551,65.5373,49.8953,21.0697,48.5833,40.9278,51.9595,54.3478,62.9828,53.7576,63.8889,54.0161,90.2222,33.1684,62.0408,79.2162,48.8793,208.9231,870.6667,628.5000,121.2000,82.8214,201.0000,211.6000,167.6667,119.1250,226.6250,142.2500,536.3333,116.0000,156.7778,1306.0000,1207.0000,276.7500,1004.0000,908.0000,802.0000,702.0000,603.0000,501.0000,401.0000,305.0000,203.0000,101.0000,0.0000]

	// Success Partial Recovery Rate
	// Success Full Recovery Rate
	// Overhead: [101.0000,101.9400,102.7900,103.5400,104.4000,105.5400,106.4300,107.2800,108.2600,109.3600,109.8900,110.7800,112.2100,112.2000,113.6600,115.4000,115.3000,116.2700,117.4800,119.1600,120.4000,120.4600,121.9500,123.5200,124.3300,125.5800,127.7900,127.6000,128.3900,128.9700,130.9600,132.4900,134.8700,137.6200,138.1100,135.7300,139.6300,141.0600,141.6400,143.1800,146.5700,146.2500,147.6000,151.5300,150.1900,154.6100,155.3300,156.2600,161.4700,162.1400,165.6500,165.1400,168.9500,167.7900,172.6900,174.4900,176.1100,179.0100,180.1900,186.4900,186.6300,187.7700,188.3100,192.2100,196.2800,194.3300,197.6700,200.6900,204.9700,205.2800,207.9500,212.3000,208.7600,215.1900,217.3900,222.4800,222.6800,225.3000,228.8800,230.5300,228.0500,234.1400,236.4200,235.1100,238.4900,239.6400,242.0700,242.9200,242.0400,246.1700,248.3100,243.3900,244.5200,247.3000,253.2700,246.2700,247.8200,243.3400,251.7500,252.1600,253.3800,249.1700,251.4000,251.2700,254.9100,244.6300,253.7100,254.1300,249.2700,248.5000,248.9000,247.0000,252.9800,250.5600,252.1000,245.7200,238.1200,249.8800,251.9500,253.4100,248.4300,247.1100,240.2900,251.1800,243.7300,256.0300,245.3600,248.3900,255.4800,238.3100,247.4900,242.2800,244.6100,251.6500,258.6100,261.9000,252.4600,253.9500,257.9100,259.1800,252.8700,263.3500,263.4000,258.8800,268.0100,267.5600,264.6000,266.9100,266.4800,269.1100,266.4500,270.1000,261.8700,260.2100,265.1500,264.8100,259.6900,261.6500,270.1500,262.2800,263.4500,262.1200,264.1600,241.9800,251.7300,256.7100,251.4700,251.8500,255.2300,237.3900,245.4000,253.1100,243.7900,240.7500,232.6800,225.9000,229.8900,241.7200,217.5900,223.4200,217.2700,218.2500,206.8800,208.0800,196.6800,212.8700,198.5400,194.1200,186.5700,174.5500,180.9800,174.3900,177.3000,162.7800,158.1400,151.2400,153.5700,155.6800,148.4800,143.5500,132.2600,137.9200,135.0400,130.0300,131.3100,125.4900,26.5700,0.0000,104.7300,116.5200,112.6600,111.6900,108.1800,109.6100,105.3500,101.8100,103.2500,98.4600,97.1900,95.1400,93.8100,93.5700,91.4100,89.1800,89.5800,86.0200,84.9200,83.0900,83.8100,82.1000,80.1700,77.9500,76.0900,75.6300,74.9200,72.1900,71.5400,71.2000,68.1700,67.5800,67.1600,65.4000,63.6900,63.1500,61.7400,60.6800,59.2900,58.0600,56.5700,56.4400,54.9700,53.6500,52.3100,51.5600,50.2100,49.0500,47.8800,47.3400,46.0800,45.2900,43.7300,42.7100,41.8400,40.7100,39.8100,38.6300,37.4500,36.5000,35.5600,34.4300,33.4900,32.3300,31.3200,30.4000,29.3400,28.2400,27.2800,26.2800,25.1500,24.1800,23.1800,22.1000,21.1600,20.1200,19.1500,18.0800,17.1200,16.1200,15.0800,14.1000,13.0800,12.0700,11.0700,10.0300,9.0300,8.0400,7.0300,6.0100,5.0400,4.0100,3.0200,2.0000,1.0100,0.0000]
	fmt.Println("Success Partial Recovery Rate: [" + strings.Join(partialRates, ",") + "]")
	fmt.Println("Success Full Recovery Rate: [" + strings.Join(fullRates, ",") + "]")
	fmt.Println("Overhead: [" + strings.Join(allOverhead, ",") + "]")
}
