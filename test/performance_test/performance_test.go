package test

import (
	"encoding/json"
	"fmt"
	ipfsconnector "ipfs-alpha-entanglement-code/ipfs-connector"
	"ipfs-alpha-entanglement-code/performance"
	"math/rand"
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

func max(a float32, b float32) float32 {
	if a > b {
		return a
	} else {
		return b
	}
}

func Test_Only_Data_Loss(t *testing.T) {
	var allRates []string
	var allOverhead []string
	var accuRate float32
	var accuOverhead float32

	onlyData := func(missNum int, fileinfo performance.FileInfo, try int) func(*testing.T) {
		return func(*testing.T) {
			conn, err := ipfsconnector.CreateIPFSConnector(0)
			require.NoError(t, err)

			// download metafile
			data, err := conn.GetFileToMem(fileinfo.MetaCID)
			require.NoError(t, err)
			var metaData performance.Metadata
			err = json.Unmarshal(data, &metaData)
			require.NoError(t, err)
			fmt.Println(len(metaData.DataCIDIndexMap), len(metaData.ParityCIDs[0]))

			// create getter
			getter, err := performance.CreateRecoverGetter(conn, metaData.DataCIDIndexMap, metaData.ParityCIDs)
			require.NoError(t, err)

			for i := 0; i < try; i++ {
				indexes := make([]int, fileinfo.TotalBlock)
				for j := 0; j < fileinfo.TotalBlock; j++ {
					indexes[j] = j + 1
				}
				missedIndexes := map[int]struct{}{}
				for j := 0; j < missNum; j++ {
					r := int(rand.Int63n(int64(len(indexes))))
					missedIndexes[indexes[r]] = struct{}{}
					indexes[r], indexes[len(indexes)-1] = indexes[len(indexes)-1], indexes[r]
					indexes = indexes[:len(indexes)-1]
				}
				getter.DataFilter = missedIndexes

				result := performance.Recovery(fileinfo, metaData, getter)
				accuRate += result.RecoverRate
				accuOverhead += result.DownloadParity
			}

		}
	}

	key := "125MB"
	try := 100
	rand.Seed(time.Now().UnixNano())
	for i := 0; i <= performance.InfoMap[key].TotalBlock; i++ {
		accuRate = 0
		accuOverhead = 0
		t.Run(fmt.Sprintf("test_%d", i), onlyData(i, performance.InfoMap[key], try))

		allRates = append(allRates, fmt.Sprintf("%.4f", accuRate/float32(try)))
		allOverhead = append(allOverhead, fmt.Sprintf("%.4f", float32(accuOverhead)/(float32(try))))
	}

	// Success Rate
	// Overhead: [0.0000,1.9500,3.8900,5.8000,7.6800,9.6100,11.5200,13.3000,15.0400,16.7800,18.6200,20.1700,22.2100,23.8700,25.5900,27.4100,29.0200,30.6200,32.3600,33.8400,35.3100,37.0200,38.5000,40.0700,41.7000,43.2500,44.1300,46.0200,47.3600,49.0400,50.3500,51.6200,53.0100,54.6500,55.6700,56.4400,58.2700,59.9000,60.3800,61.9500,63.1400,64.5400,65.2600,66.3900,68.0000,68.2300,70.4200,71.1100,72.4000,73.3400,74.4000,75.2700,75.8300,76.8900,78.6100,79.0700,80.3800,80.9300,82.1700,82.5800,83.5800,84.8300,84.9900,85.7900,86.5500,87.3600,88.0900,89.1100,89.5700,90.0100,90.7900,91.0200,91.7400,92.6200,92.6700,93.8400,93.9600,94.3500,94.8900,95.5400,96.0400,96.2800,96.6000,97.1400,97.5000,97.9200,98.1700,98.3700,98.8400,99.3400,99.4200,99.6800,99.8600,100.0600,100.1800,100.4700,100.5300,100.6500,100.8100,100.8700,100.9800,101.0000]
	fmt.Println("Success Rate: [" + strings.Join(allRates, ",") + "]")
	fmt.Println("Overhead: [" + strings.Join(allOverhead, ",") + "]")
}

func Test_Only_Parity_Loss(t *testing.T) {
	var partialRates []string
	var fullRates []string
	var allOverhead []string

	onlyParity := func(missNum int, fileinfo performance.FileInfo, iteration int) func(*testing.T) {
		return func(*testing.T) {
			result := performance.RecoverWithFilter(fileinfo, missNum, iteration, 0)
			partialRates = append(partialRates, fmt.Sprintf("%.4f", result.RecoverRate))
			fullRates = append(fullRates, fmt.Sprintf("%.4f", result.FullSuccessCnt))
			allOverhead = append(allOverhead, fmt.Sprintf("%.4f", result.DownloadParity))
		}
	}

	key := "125MB"
	try := 100
	rand.Seed(time.Now().UnixNano())
	for i := 0; i <= 2; i += 5 {
		t.Run(fmt.Sprintf("test_%d", i), onlyParity(i, performance.InfoMap[key], try))
		fmt.Println("Success Partial Recovery Rate: [" + strings.Join(partialRates, ",") + "]")
		fmt.Println("Success Full Recovery Rate: [" + strings.Join(fullRates, ",") + "]")
		fmt.Println("Overhead: [" + strings.Join(allOverhead, ",") + "]")
	}
	// 5MB
	// Success Partial Recovery Rate: [1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,0.9995,1.0000,0.9990,0.9990,0.9581,0.9686,0.9152,0.9448,0.9352,0.8438,0.8267,0.8386,0.7148,0.7614,0.5838,0.5919,0.4257,0.3933,0.3886,0.3081,0.2514,0.1262,0.1586,0.0633,0.0833,0.0471,0.0305,0.0400,0.0210,0.0186,0.0152,0.0171,0.0090,0.0067,0.0024,0.0019,0.0014,0.0014,0.0000,0.0000,0.0000]
	// Success Full Recovery Rate: [1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,0.9900,1.0000,0.9800,0.9800,0.9200,0.9400,0.8400,0.8500,0.8600,0.7700,0.6600,0.6900,0.4500,0.5200,0.2300,0.2200,0.1400,0.0500,0.0100,0.0100,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000]
	// Overhead: [21.0000,21.6600,22.4300,22.9700,23.4700,24.2300,24.8800,25.4900,27.9300,28.7100,31.1700,32.0300,33.4500,34.8500,36.2700,38.8600,39.8300,39.7700,43.4800,43.8700,44.8300,46.1600,48.0300,47.8200,48.1800,47.9400,48.4200,48.4100,48.5400,47.3400,48.0200,47.5200,46.1000,45.3900,44.2500,41.7500,42.6700,38.6700,38.6900,33.5800,31.6100,30.6400,27.6800,25.6100,22.2700,21.1400,19.0100,17.8200,16.0800,14.8600,13.7100,12.5600,11.3900,10.3300,9.1500,8.1700,7.1300,6.0300,5.0000,4.0100,3.0000,2.0000,1.0000,0.0000]

	// 25MB
	// Success Partial Recovery Rate
	// Success Full Recovery Rate
	// Overhead: [101.0000,101.8600,103.0500,103.9800,104.8900,105.7700,106.9000,107.3600,107.9100,109.8600,110.3600,111.5500,111.3800,113.1100,113.9100,115.0100,116.0000,115.7400,117.8100,118.0900,119.8000,120.7700,121.9200,122.6300,124.2300,125.9800,127.4400,126.8200,127.5900,129.7300,131.3600,134.1000,135.0700,134.1400,137.9800,137.4000,140.3900,140.2400,142.4800,143.1100,146.8600,145.7100,150.3600,150.2500,152.4900,154.1300,153.3200,159.9000,162.0800,160.2200,164.2300,165.1200,166.1800,169.8800,170.5900,172.5700,174.4800,178.4300,179.4500,183.3100,180.6100,185.1900,187.5200,190.1900,193.7400,193.8000,197.6800,196.2900,198.6400,202.8200,202.8500,202.9200,207.5000,209.6700,208.6500,210.2300,213.7900,214.8900,215.3600,220.0600,218.4900,220.6800,222.5500,225.3500,226.1300,230.4500,228.5000,231.7600,234.9500,233.8900,233.1200,234.5900,236.0800,237.2300,238.9700,238.3400,241.6400,242.0000,243.1200,244.3000,246.3400,243.5300,248.6300,249.4100,247.5200,249.9000,252.5600,251.5100,254.7200,255.8800,251.6200,258.3600,258.8200,259.4900,255.2500,260.3000,259.4400,261.4900,259.1500,263.5500,261.4900,264.2000,263.0200,265.5400,265.3600,262.6600,265.0600,263.9900,267.8900,268.5800,264.1700,268.9900,266.8500,270.3700,269.2600,268.7400,271.4900,270.6800,270.5000,269.8500,270.5400,269.7000,271.6400,272.5100,271.3900,269.5200,272.0500,269.0300,270.3100,272.8300,270.8700,273.1700,270.8600,272.9000,267.6500,269.0300,272.7500,269.3500,266.8800,268.7100,267.6900,266.9400,268.7800,264.4900,258.6700,267.9400,261.9900,263.4400,258.9600,261.1500,264.6700,256.1000,250.5600,255.3600,256.4200,247.2900,246.2900,242.6800,240.8200,239.6200,231.4300,228.8300,219.7200,227.7300,216.5500,215.9800,213.8100,211.1900,199.8200,194.0600,190.9600,190.8700,188.0000,178.5200,179.7100,174.4200,167.8600,166.0100,164.2800,157.3900,158.1900,153.4600,150.6300,145.5300,143.0600,144.5100,138.2000,137.6600,135.6300,130.5000,128.3700,125.5500,125.8500,120.0900,120.6200,116.7300,113.8200,112.8700,111.0800,108.3100,107.2000,104.7900,103.5200,100.7600,99.1200,97.4300,94.9400,93.7800,91.6500,88.8200,88.0800,87.1700,85.6300,84.3400,81.7500,80.0900,78.4900,76.3800,75.3200,73.6600,72.4700,70.8600,69.8100,68.0500,66.5600,65.3300,63.4100,62.7000,61.5500,59.6400,58.5400,56.7200,56.2200,54.7700,53.2900,51.9400,50.6100,49.4100,48.2700,47.1800,45.9100,44.6800,43.2400,42.4200,41.2100,39.7600,38.8600,37.4700,36.3400,35.3800,34.3100,33.1800,31.9300,30.9500,29.9200,28.6500,27.5300,26.5100,25.4200,24.4600,23.3600,22.4500,21.3500,20.2100,19.2300,18.1400,17.1700,16.1400,15.0800,14.0400,13.0300,12.0400,11.0100,10.0200,9.0000,8.0000,7.0000,6.0000,5.0000,4.0000,3.0000,2.0000,1.0000,0.0000]
	fmt.Println("Success Partial Recovery Rate: [" + strings.Join(partialRates, ",") + "]")
	fmt.Println("Success Full Recovery Rate: [" + strings.Join(fullRates, ",") + "]")
	fmt.Println("Overhead: [" + strings.Join(allOverhead, ",") + "]")
}

func Test_Only_Parity_Loss_Node_Loss(t *testing.T) {
	var partialRates []string
	var fullRates []string
	var allOverhead []string
	nbNodes := 10

	onlyParity := func(missNum int, fileinfo performance.FileInfo, iteration int) func(*testing.T) {
		return func(*testing.T) {
			result := performance.RecoverWithFilter(fileinfo, missNum, iteration, nbNodes)
			partialRates = append(partialRates, fmt.Sprintf("%.4f", result.RecoverRate))
			fullRates = append(fullRates, fmt.Sprintf("%.4f", result.FullSuccessCnt))
			allOverhead = append(allOverhead, fmt.Sprintf("%.4f", result.DownloadParity))
		}
	}

	key := "25MB"
	try := 100
	rand.Seed(time.Now().UnixNano())
	for i := 0; i <= nbNodes; i++ {
		t.Run(fmt.Sprintf("test_%d", i), onlyParity(i, performance.InfoMap[key], try))
	}

	// Success Partial Recovery Rate: [1.0000,1.0000,1.0000,0.9998,0.9998,0.9889,0.8618,0.2721,0.0376,0.0028,0.0000]
	// Success Full Recovery Rate: [1.0000,1.0000,1.0000,0.9800,0.9800,0.8800,0.4000,0.0000,0.0000,0.0000,0.0000]
	// Overhead: [101.0000,129.0800,173.6600,236.2200,257.5900,263.8800,253.0800,123.2100,64.3300,30.2800,0.0000]
	fmt.Println("Success Partial Recovery Rate: [" + strings.Join(partialRates, ",") + "]")
	fmt.Println("Success Full Recovery Rate: [" + strings.Join(fullRates, ",") + "]")
	fmt.Println("Overhead: [" + strings.Join(allOverhead, ",") + "]")
}
